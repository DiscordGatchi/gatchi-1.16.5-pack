name: Package
on: [push]

jobs:
  mods:
    name: Package Mods
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
#
#      - name: Setup Java
#        uses: actions/setup-java@v3
#        with:
#          distribution: oracle
#          java-version: 17
#          java-package: jdk
#
#      - name: Serve toml files
#        uses: Eun/http-server-action@v1
#        with:
#          directory: ${{ github.workspace }}
#          port: 8080
#          no-cache: true
#          content-types: |
#            { "toml": "text/plain" }
#
#      - name: Get server mods
#        run: |
#          mkdir server && cd server
#          java -jar ../packwiz-installer-bootstrap.jar -g -s server http://localhost:8080/pack.toml
#
#      - name: Get client mods
#        run: |
#          mkdir client && cd client
#          java -jar ../packwiz-installer-bootstrap.jar -g -s both http://localhost:8080/pack.toml
#
#      - name: Upload server mods
#        uses: actions/upload-artifact@v3
#        with:
#          name: server-mods
#          path: server/
#
#      - name: Upload client mods
#        uses: actions/upload-artifact@v3
#        with:
#          name: client-mods
#          path: client/

  test:
    name: Test Server & Generate Config
    runs-on: ubuntu-latest
    needs: mods

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Download server mods
#        uses: actions/download-artifact@v3
#        with:
#          name: server-mods
#          path: server/
#
#      - name: Run server
#        run: |
#          docker run \
#          -v $(pwd)/server:/data \
#          -e TYPE=FABRIC \
#          -e VERSION=1.18.2 \
#          -e MEMORY=4G \
#          -e ENABLE_AUTOSTOP=TRUE \
#          -e AUTOSTOP_TIMEOUT_INIT=1 \
#          -e EULA=TRUE \
#          itzg/minecraft-server
#
#      - name: Check server folder
#        run: ls server

  release:
    name: Release & Upload Zipped Mod Files
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: 'feat/packwiz/docker-and-server-deploy'


      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Update the pack.toml version
        uses: colathro/toml-editor@1.1.0
        with:
          file: "pack.toml"
          key: "version"
          value: ${{ steps.tag_version.outputs.new_version || steps.tag_version.outputs.previous_version }}

      - name: DEBUG LOG OUTPUTS
        run: |
          echo "New tag: ${{ steps.tag_version.outputs.new_tag }}"
          echo "New version: ${{ steps.tag_version.outputs.new_version }}"
          echo "Previous version: ${{ steps.tag_version.outputs.previous_version }}"
          echo "Changelog: ${{ steps.tag_version.outputs.changelog }}"
          echo "Pack.toml version: ${{ cat pack.toml | grep version }}"
          echo "Release name: ${{ steps.create_release.outputs.name }}"

#      - name: Download server mods
#        uses: actions/download-artifact@v3
#        with:
#          name: server-mods
#          path: server/
#
#      - name: Download client mods
#        uses: actions/download-artifact@v3
#        with:
#          name: client-mods
#          path: client/
#
#      - name: Zip server mods
#        run: zip -r server-mods.zip server/
#
#      - name: Zip client mods
#        run: zip -r client-mods.zip client/
#
#      - name: Upload server mods
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./server-mods.zip
#          asset_name: server-mods.zip
#          asset_content_type: application/zip
#
#      - name: Upload client mods
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./client-mods.zip
#          asset_name: client-mods.zip
#          asset_content_type: application/zip