name: Package
on: [push]

jobs:
  mods:
    name: Package Mods
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: oracle
          java-version: 17
          java-package: jdk

      - name: Serve toml files
        uses: Eun/http-server-action@v1
        with:
          directory: ${{ github.workspace }}
          port: 8080
          no-cache: true
          content-types: |
            { "toml": "text/plain" }

      - name: Get server mods
        run: |
          mkdir server && cd server
          java -jar ../packwiz-installer-bootstrap.jar -g -s server http://localhost:8080/pack.toml

      - name: Get client mods
        run: |
          mkdir client && cd client
          java -jar ../packwiz-installer-bootstrap.jar -g -s both http://localhost:8080/pack.toml

      - name: Upload server mods
        uses: actions/upload-artifact@v3
        with:
          name: server-mods
          path: server/

      - name: Upload client mods
        uses: actions/upload-artifact@v3
        with:
          name: client-mods
          path: client/

  test:
    name: Test Server & Generate Config
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download server mods
        uses: actions/download-artifact@v3
        with:
          name: server-mods
          path: server/

      - name: Run server
        run: |
          docker run \
          -v $(pwd)/server:/data \
          -e TYPE=FABRIC \
          -e VERSION=1.18.2 \
          -e MEMORY=4G \
          -e ENABLE_AUTOSTOP=TRUE \
          -e AUTOSTOP_TIMEOUT_INIT=1 \
          -e EULA=TRUE \
          itzg/minecraft-server

      - name: Check server folder
        run: ls server

  release:
    name: Release & Upload Zipped Mod Files
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install semver
        run: npm install -g semver

      - uses: SebRollen/toml-action@v1.0.1
        id: pack_toml
        with:
          file: 'pack.toml'
          field: 'version'

      - name: Last Commit Type (major|minor|patch)
        id: last_commit_type
        run: |
          echo "::set-output name=type::$(git log -1 --pretty=%B | sed -n 's/^.*\[\([a-z]*\)\].*$/\1/p')"

      - name: Increment and return version
        id: version
        run: |
          echo ::set-output name=version::$(semver -i ${{ steps.last_commit_type.outputs.type }} ${{ steps.pack_toml.outputs.value }})

      - name: Update the pack.toml version
        uses: colathro/toml-editor@1.1.0
        with:
          file: "pack.toml"
          key: "version"
          value: ${{ steps.version.outputs.version }}

      - name: DEBUG TEST
        run: |
          echo ${{ steps.version.outputs.version }}
          echo ${{ steps.last_commit_type.outputs.type }}
          echo ${{ steps.pack_toml.outputs.value }}
          echo $(cat pack.toml)
          echo $(git log -1 --pretty=%B | sed -n 's/^.*\[\([a-z]*\)\].*$/\1/p')
#
#      - name: Create a new release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: false
#          prerelease: false
#
#      - name: Download server mods
#        uses: actions/download-artifact@v3
#        with:
#          name: server-mods
#          path: server/
